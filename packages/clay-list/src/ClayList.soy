{namespace ClayList}

/**
 * This renders the component's whole content.
 */
{template .render}
	{@param items: list<[
		actionItems: list<[
			disabled: bool,
			href: string,
			icon: string,
			label: string,
			quickAction: bool,
			separator: bool
		]>,
		description: string,
		href: string,
		icon: string,
		iconShape: string,
		labels: list<[
			label: string,
			style: string
		]>,
		selected: bool,
		title: string
	]>}
	{@param? elementClasses: string}
	{@param? handleItemToggled_: any}
	{@param? id: string}
	{@param? selectable: bool}
	{@param? spritemap: string}
	{@param? title: string}

	{let $attributes kind="attributes"}
		class="list-group show-quick-actions-on-hover
			{if $elementClasses}
				{sp}elementClasses
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	<ul {$attributes}>
		{if $title}
			<li class="list-group-header">
				<h3 class="list-group-header-title">{$title}</h3>
			</li>
		{/if}

		{foreach $item in $items}
			{call ClayListItem.render}
				{param actionItems: $item.actionItems /}
				{param description: $item.description /}
				{param events: ['itemToggled': $handleItemToggled_ ] /}
				{param href: $item.href /}
				{param icon: $item.icon /}
				{param iconShape: $item.iconShape /}
				{param labels: $item.labels /}
				{param selectable: $selectable /}
				{param selected: $item.selected /}
				{param spritemap: $spritemap /}
				{param title: $item.title /}
			{/call}
		{/foreach}
	</ul>
{/template}