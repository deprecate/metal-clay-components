// Styles the `.navbar-overlay-*-down` and `.navbar-overlay-up` components to
// fill the full width and height of the Navbar.

@mixin navbar-overlay() {
	@include border-radius($navbar-border-radius);

	bottom: 0;
	display: none;
	justify-content: space-between;
	left: 0;
	margin-left: 0;
	margin-right: 0;
	padding: $navbar-padding-y $navbar-padding-x;
	position: absolute;
	right: 0;
	top: 0;
	z-index: $zindex-navbar-overlay;

	&.show {
		display: flex;
	}
}

// Sizes Navbar Desktop and Mobile based on height, font-size, and padding
// @param $map - Sass map that contain Navbar properties to modify

@mixin navbar-size($map) {
	$scaling-navbar: setter(map-get($map, scaling-navbar), false);
	$height: setter(map-get($map, height), 3.5rem);
	$border-bottom-width: setter(map-get($map, border-bottom-width), 0);
	$border-left-width: setter(map-get($map, border-left-width), 0);
	$border-right-width: setter(map-get($map, border-right-width), 0);
	$border-top-width: setter(map-get($map, border-top-width), 0);
	$font-size: setter(map-get($map, font-size), $font-size-base);
	$padding-x: setter(map-get($map, padding-x), $navbar-padding-x);
	$padding-y: setter(map-get($map, padding-y), $navbar-padding-y);
	$link-padding-x: setter(map-get($map, link-padding-x), 0.5rem);
	$link-padding-y: ($height - $border-bottom-width - $border-top-width - ($padding-y * 2) - ($font-size * $line-height-base)) / 2;
	$brand-font-size: setter(map-get($map, brand-font-size), $navbar-brand-font-size);
	$brand-max-width: setter(map-get($map, brand-max-width), calc(100% - 72px));
	$brand-margin-right: map-get($map, brand-margin-right);
	$brand-padding-x: map-get($map, brand-padding-x);
	$brand-padding-y: setter(map-get($map, brand-padding-y), (($height - $border-bottom-width - $border-top-width - ($padding-y * 2) - ($brand-font-size * $line-height-base)) / 2));
	$active-border-bottom-width: setter(map-get($map, active-border-bottom-width), 0.125rem);
	$nav-item-dropdown-margin-top: map-get($map, nav-item-dropdown-margin-top);

	$height-mobile: setter(map-get($map, height-mobile), $height);
	$font-size-mobile: setter(map-get($map, font-size-mobile), $font-size-base-mobile);
	$link-padding-x-mobile: setter(map-get($map, link-padding-x-mobile), 0);
	$link-padding-y-mobile: ($height-mobile - $border-bottom-width - $border-top-width - ($padding-y * 2) - ($font-size-mobile * $line-height-base)) / 2;
	$brand-font-size-mobile: setter(map-get($map, brand-font-size-mobile), $font-size-lg-mobile);
	$brand-margin-right-mobile: setter(map-get($map, brand-margin-right-mobile), 0);
	$brand-padding-x-mobile: setter(map-get($map, brand-padding-x-mobile), $link-padding-x-mobile);
	$brand-padding-y-mobile: setter(map-get($map, brand-padding-y-mobile), (($height-mobile - $border-bottom-width - $border-top-width - ($padding-y * 2) - ($brand-font-size-mobile * $line-height-base)) / 2));

	$toggler-font-size: setter(map-get($map, toggler-font-size), $navbar-toggler-font-size);
	$toggler-height: setter(map-get($map, toggler-height), $height-mobile * 0.66667);
	$toggler-margin-x: map-get($map, toggler-margin-x);
	$toggler-margin-y: map-get($map, toggler-margin-y);
	$toggler-padding-x: setter(map-get($map, toggler-padding-x), $navbar-toggler-padding-x);
	$toggler-padding-y: setter(map-get($map, toggler-padding-y), $navbar-toggler-padding-y);

	$toggler-link-font-size: setter(map-get($map, toggler-link-font-size), $font-size-base);
	$toggler-link-height: setter(map-get($map, toggler-link-height), auto);
	$toggler-link-line-height: setter(map-get($map, toggler-link-line-height), $line-height-base);
	$toggler-link-margin-x: setter(map-get($map, toggler-link-margin-x), 0);
	$toggler-link-margin-y: map-get($map, toggler-link-margin-y);
	$toggler-link-padding-x: setter(map-get($map, toggler-link-padding-x), $link-padding-x-mobile);
	$toggler-link-padding-y: ($height-mobile - $border-bottom-width - $border-top-width - ($padding-y * 2) - ($toggler-link-font-size * $toggler-link-line-height)) / 2;

	border-width: $border-top-width $border-right-width $border-bottom-width $border-left-width;
	font-size: $font-size;
	padding: $padding-y $padding-x;

	// @include scale-component($scaling-navbar) {
	// 	font-size: $font-size-mobile;
	// }

	.navbar-toggler {
		font-size: $toggler-font-size;
		height: $toggler-height;
		margin-bottom: $toggler-margin-y;
		margin-left: $toggler-margin-x;
		margin-right: $toggler-margin-x;
		margin-top: $toggler-margin-y;
		padding-bottom: $toggler-padding-y;
		padding-left: $toggler-padding-x;
		padding-right: $toggler-padding-x;
		padding-top: $toggler-padding-y;
	}

	.navbar-toggler-link {
		height: $toggler-link-height;
		font-size: $toggler-link-font-size;
		line-height: $toggler-link-line-height;
		margin-bottom: $toggler-link-margin-y;
		margin-left: $toggler-link-margin-x;
		margin-right: $toggler-link-margin-x;
		margin-top: $toggler-link-margin-y;
		padding-bottom: $toggler-link-padding-y;
		padding-left: $toggler-link-padding-x;
		padding-right: $toggler-link-padding-x;
		padding-top: $toggler-link-padding-y;
	}

	.navbar-brand {
		@if ($scaling-navbar) {
			font-size: $brand-font-size-mobile;
			margin-right: $brand-margin-right-mobile;
			max-width: $brand-max-width;
			padding-bottom: $brand-padding-y-mobile;
			padding-left: $brand-padding-x-mobile;
			padding-right: $brand-padding-x-mobile;
			padding-top: $brand-padding-y-mobile;
		}
		@else {
			font-size: $brand-font-size;
			margin-right: $brand-margin-right;
			max-width: $brand-max-width;
			padding-bottom: $brand-padding-y;
			padding-left: $brand-padding-x;
			padding-right: $brand-padding-x;
			padding-top: $brand-padding-y;
		}
	}

	.navbar-form {
		@if not ($link-padding-x == 0.5rem) {
			padding-left: $link-padding-x;
			padding-right: $link-padding-x;
		}

		// @include scale-component($scaling-navbar) {
		// 	padding-left: $link-padding-x-mobile;
		// 	padding-right: $link-padding-x-mobile;
		// }

		.btn,
		.form-control {
			@if (($height - $border-bottom-width - $border-top-width - ($padding-y * 2)) < ($input-height-inner + $border-bottom-width + $border-top-width)) {
				height: auto;
				padding-bottom: $link-padding-y;
				padding-top: $link-padding-y;
			}
		}
	}

	.navbar-nav .nav-btn {
		margin-left: $link-padding-x;
		margin-right: $link-padding-x;

		@if (($height - $border-bottom-width - $border-top-width - ($padding-y * 2)) < ($input-height-inner + $border-bottom-width + $border-top-width)) {
			padding-bottom: $link-padding-y;
			padding-top: $link-padding-y;
		}

		// @include scale-component($scaling-navbar) {
		// 	margin-left: $link-padding-x-mobile;
		// 	margin-right: $link-padding-x-mobile;
		// }
	}

	.navbar-nav .nav-item > .form-check {
		margin: 0;
		padding-left: $link-padding-x;
		padding-right: $link-padding-x;

		// @include scale-component($scaling-navbar) {
		// 	padding-left: $link-padding-x-mobile;
		// 	padding-right: $link-padding-x-mobile;
		// }
	}

	.navbar-collapse .navbar-nav .nav-link {
		padding-bottom: $link-padding-y-mobile;
		padding-left: $link-padding-x-mobile;
		padding-right: $link-padding-x-mobile;
		padding-top: $link-padding-y-mobile;
	}

	// Navbar Item Spacing
	// Override BS4 `.navbar-expand .navbar-nav .nav-link` should have padding if
	// not inside .navbar-collapse

	.navbar-nav {
		.nav-item {
			.dropdown-menu {
				margin-top: $nav-item-dropdown-margin-top;
			}
		}

		.navbar-text {
			padding: $link-padding-y $link-padding-x;

			// @include scale-component($scaling-navbar) {
			// 	padding: $link-padding-y-mobile $link-padding-x-mobile;
			// }
		}
	}

	// Navbar Expand

	&.navbar-expand {
		@each $breakpoint in map-keys($grid-breakpoints) {
			$next: breakpoint-next($breakpoint, $grid-breakpoints);
			$infix: breakpoint-infix($next, $grid-breakpoints);

			&#{$infix} { // .navbar-expand, sm, md, lg, xl
				@if not ($infix == '') { // .navbar-expand-sm, md, lg, xl
					@include media-breakpoint-down($breakpoint) {
						&.navbar-collapse-absolute {
							.navbar-collapse {
								border-width: 0 $border-right-width $border-bottom-width $border-left-width;
								left: -$border-left-width;

								@if ($border-bottom-width > 0) {
									margin-top: $border-bottom-width;
								}

								@if not ($padding-x == 0) {
									padding-left: $padding-x;
									padding-right: $padding-x;
								}

								right: -$border-right-width;
							}
						}
					}
				}

				@include media-breakpoint-up($next) {
					.navbar-brand {
						@if ($scaling-navbar) {
							font-size: $brand-font-size;
							margin-right: $brand-margin-right;
							padding-bottom: $brand-padding-y;
							padding-left: $brand-padding-x;
							padding-right: $brand-padding-x;
							padding-top: $brand-padding-y;
						}
					}

					.navbar-form {
						padding-left: $link-padding-x;
						padding-right: $link-padding-x;
					}

					.navbar-nav .nav-link {
						padding-bottom: $link-padding-y;
						padding-left: $link-padding-x;
						padding-right: $link-padding-x;
						padding-top: $link-padding-y;

						// @include scale-component($scaling-navbar) {
						// 	@if not ($link-padding-y-mobile == $nav-link-padding-y) {
						// 		padding-bottom: $link-padding-y-mobile;
						// 		padding-top: $link-padding-y-mobile;
						// 	}

						// 	@if not ($link-padding-x-mobile == 0.5rem) {
						// 		padding-left: $link-padding-x-mobile;
						// 		padding-right: $link-padding-x-mobile;
						// 	}
						// }
					}
				}
			}
		}
	}

	&.navbar-highlight {
		.navbar-toggler-link {
			&:after {
				bottom: -$border-bottom-width - $padding-y;
				height: $active-border-bottom-width;
				left: $toggler-link-padding-x;
				right: $toggler-link-padding-x;

				// @include scale-component($scaling-navbar) {
				// 	left: $toggler-link-padding-x-mobile;
				// 	right: $toggler-link-padding-x-mobile;
				// }
			}
		}
	}

	&.navbar-highlight.navbar-expand {
		@each $breakpoint in map-keys($grid-breakpoints) {
			$next: breakpoint-next($breakpoint, $grid-breakpoints);
			$infix: breakpoint-infix($next, $grid-breakpoints);

			&#{$infix} { // .navbar-expand, sm, md, lg, xl
				@include media-breakpoint-up($next) {
					.navbar-nav .nav-link {
						&.active:after {
							bottom: -$border-bottom-width - $padding-y;
							height: $active-border-bottom-width;
							left: $link-padding-x;
							right: $link-padding-x;
						}
					}
				}
			}
		}
	}
}