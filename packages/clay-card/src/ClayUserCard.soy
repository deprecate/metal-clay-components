{namespace ClayUserCard}

/**
 * This renders the component's whole content.
 */
{template .render}
    {@param name: string}
    {@param? actionItems: list<[
        href: string,
        label: string,
        separator: bool
    ]>}
    {@param? disabled: bool}
    {@param? elementClasses: string}
    {@param? handleItemToggled_: any}
    {@param? href: string}
    {@param? id: string}
    {@param? imageAlt: string}
    {@param? imageSrc: string}
    {@param? initials: string}
    {@param? inputName: string}
    {@param? inputValue: string}
    {@param? selectable: bool}
    {@param? selected: bool}
    {@param? spritemap: string}
    {@param? subtitle: string}
    {@param? userColor: string}

    {let $classes kind="text"}
        user-card
        {if $elementClasses}
            {sp}{$elementClasses}
        {/if}
    {/let}

    {call ClayCard.render}
        {param actionItems: $actionItems /}
        {param contentRenderer: 'user' /}
        {param disabled: $disabled /}
        {param elementClasses: $elementClasses /}
        {param events: ['itemToggled': $handleItemToggled_ ] /}
        {param fileType: $initials /}
        {param fileTypeStyle: $userColor /}
        {param href: $href /}
        {param id: $id /}
        {param imageAlt: $imageAlt /}
        {param imageSrc: $imageSrc /}
        {param inputName: $inputName /}
        {param inputValue: $inputValue /}
        {param ref: 'card' /}
        {param selectable: $selectable /}
        {param selected: $selected /}
        {param spritemap: $spritemap /}
        {param subtitle: $subtitle /}
        {param title: $name /}
    {/call}
{/template}

/**
 * This renders the information area of the card.
 */
{deltemplate ClayCard.DescriptiveArea variant="'user'"}
    {@param title: string}
    {@param? actionItems: list<[
    	href: string,
    	label: string,
    	separator: bool
    ]>}
    {@param? href: string}
    {@param? labels: list<[
		label: string,
		style: string
	]>}
    {@param? spritemap: string}
    {@param? subtitle: string}

    <div class="card-body">
    	<div class="card-row">
    		<div class="flex-col flex-col-expand">
    			{if $href}
    				{call ClayLink.render}
    					{param elementClasses: 'card-title text-truncate' /}
    					{param href: $href /}
    					{param label: $title /}
    				{/call}
    			{elseif $title}
    				<div class="card-title text-truncate" title="{$title}">{$title}</div>
    			{/if}

    			{if $subtitle}
    				<div class="card-subtitle text-truncate" title="{$subtitle}">{$subtitle}</div>
    			{/if}
    		</div>

    		{if $actionItems and $spritemap}
    			<div class="flex-col">
    				{call ClayActionsDropdown.render}
    					{param items: $actionItems /}
    					{param spritemap: $spritemap /}
    				{/call}
    			</div>
    		{/if}
    	</div>
    </div>
{/deltemplate}

/**
 * Render the visual area of the card.
 */
{deltemplate ClayCard.VisualArea variant="'user'"}
    {@param? fileType: string}
    {@param? fileTypeStyle: string}
    {@param? icon: string}
    {@param? imageAlt: string}
    {@param? imageSrc: string}
    {@param? spritemap: string}

    {let $classesAspectRatio kind="text"}
    	aspect-ratio-item-center-middle aspect-ratio-item-fluid
    {/let}

    <div class="aspect-ratio-item-center-middle aspect-ratio-item-fluid card-type-asset-icon">
        {call ClaySticker.render}
            {param label kind="html"}
                {if $imageSrc}
                    {let $imageAttributes kind="attributes"}
                        alt="
                            {if $imageAlt}
                                {$imageAlt}
                            {/if}
                        "

                        class="img-fluid"
                        src="{$imageSrc}"
                    {/let}

                    <img {$imageAttributes} />
                {elseif $fileType}
                    <span class="sticker-overlay">{$fileType}</span>
                {/if}
            {/param}

            {param shape: 'circle' /}
            {param size: 'xl' /}
            {param style: $fileTypeStyle ?: 'primary' /}
        {/call}
    </div>
{/deltemplate}
