{namespace ClayDropdownBase}

/**
 * This renders a dropdown.
 */
{template .render}
	{@param items: list<?>}
	{@param label: html|string}
	{@param? button: ?}
	{@param? caption: string}
	{@param? elementClasses: string}
	{@param? expanded: bool}
	{@param? handleButtonClick_: any}
	{@param? handleItemClick_: any}
	{@param? helpText: string}
	{@param? id: string}
	{@param? itemsIconAlignment: string}
	{@param? searchable: bool}
	{@param? spritemap: string}
	{@param? style: string}
	{@param? triggerClasses: string}
	{@param? type: string}

	{let $attributes kind="attributes"}
		class="dropdown
			{if $elementClasses}
				{sp}{$elementClasses}
			{/if}

			{if $expanded}
				{sp}show
			{/if}
		"

		{if $id}
			id="{$id}"
		{/if}
	{/let}

	<div {$attributes}>
		{call .trigger}
			{param classes: $triggerClasses /}
			{param expanded: $expanded /}
			{param label: $label /}
			{param style: $style /}
		{/call}

		{call .sections}
			{param button: $button /}
			{param caption: $caption /}
			{param expanded: $expanded /}
			{param handleButtonClick_: $handleButtonClick_ /}
			{param handleItemClick_: $handleItemClick_ /}
			{param helpText: $helpText /}
			{param items: $items /}
			{param itemsIconAlignment: $itemsIconAlignment /}
			{param searchable: $searchable /}
			{param spritemap: $spritemap /}
			{param type: $type ?: 'list' /}
		{/call}
	</div>
{/template}

/**
 * Renders an item
 */
{template .item}
	{@param item: ?}
	{@param? handleItemClick_: any}
	{@param? id: string}
	{@param? isInList: bool}
	{@param? itemsIconAlignment: string}
	{@param? spritemap: string}

	{call ClayDropdownItem.render}
		{param active: $item.active /}
		{param checked: $item.checked /}
		{param disabled: $item.disabled /}
		{param events: ['click': $handleItemClick_] /}
		{param href: $item.href /}
		{param icon: $item.icon /}
		{param id: $id /}
		{param inputName: $item.inputName /}
		{param inputValue: $item.inputValue /}
		{param isInList: $isInList /}
		{param items: $item.items /}
		{param itemsIconAlignment: $itemsIconAlignment /}
		{param label: $item.label ?: '' /}
		{param separator: $item.separator /}
		{param spritemap: $spritemap /}
		{param type: $item.type /}
	{/call}
{/template}

/**
 * Renders a list of items
 */
{template .items}
	{@param items: list<?>}
	{@param? handleItemClick_: any}
	{@param? isInList: bool}
	{@param? itemsIconAlignment: string}
	{@param? spritemap: string}

	{foreach $item in $items}
		{call ClayDropdownItem.render}
			{param active: $item.active /}
			{param checked: $item.checked /}
			{param disabled: $item.disabled /}
			{param events: ['click': $handleItemClick_] /}
			{param href: $item.href /}
			{param icon: $item.icon /}
			{param inputName: $item.inputName /}
			{param inputValue: $item.inputValue /}
			{param isInList: $isInList /}
			{param items: $item.items /}
			{param itemsIconAlignment: $itemsIconAlignment /}
			{param label: $item.label ?: '' /}
			{param separator: $item.separator /}
			{param spritemap: $spritemap /}
			{param type: $item.type /}
		{/call}
	{/foreach}
{/template}

/**
 * Renders a search input
 */
{template .search}
	{@param spritemap: string}

	<div class="dropdown-section">
		<div class="input-group input-group-inset">
			<div class="input-group-input">
				<input aria-label="Search for..." class="form-control" data-oninput="handleSearch_" placeholder="Search for..." type="text" ref="searchInput">
			</div>

			<span class="input-group-inset-item">
				{call ClayButton.render}
					{param icon: 'search' /}
					{param spritemap: $spritemap /}
					{param style: 'link' /}
				{/call}
			</span>
		</div>
	</div>
{/template}

/**
 * Renders the dropdown sections
 */
{template .sections}
	{@param items: list<?>}
	{@param? button: ?}
	{@param? caption: string}
	{@param? expanded: bool}
	{@param? handleButtonClick_: any}
	{@param? handleItemClick_: any}
	{@param? helpText: string}
	{@param? itemsIconAlignment: string}
	{@param? searchable: bool}
	{@param? spritemap: string}
	{@param? type: string}

	{let $listAttributes kind="attributes"}
		class="dropdown-menu
			{if $itemsIconAlignment == 'left'}
				{sp}dropdown-menu-indicator-start
			{elseif $itemsIconAlignment == 'right'}
				{sp}dropdown-menu-indicator-end
			{/if}

			{if $expanded}
				{sp}show
			{/if}
		"
	{/let}

	{let $dropdownMenu kind="html"}
		<div {$listAttributes}>
			{if $helpText}
				<div class="alert alert-fluid alert-info" role="alert">
					{$helpText}
				</div>
			{/if}

			{if $searchable and $spritemap}
				{call .search}
					{param spritemap: $spritemap /}
				{/call}
			{/if}

			{let $itemList kind="html"}
				{call .items}
					{param handleItemClick_: $handleItemClick_ /}
					{param isInList: $type == 'list' /}
					{param items: $items /}
					{param itemsIconAlignment: $itemsIconAlignment /}
					{param spritemap: $spritemap /}
				{/call}
			{/let}

			{if $type == 'list'}
				<ul class="list-unstyled">
					{$itemList}
				</ul>
			{else}
					{$itemList}
			{/if}

			{if $caption}
				<div class="dropdown-caption">{$caption}</div>
			{/if}

			{if $button}
				<div class="dropdown-section">
					{call ClayButton.render}
						{param block: true /}
						{param events: ['click': $handleButtonClick_ ]/}
						{param label: $button.label /}
						{param ref: 'dropdownButton' /}
						{param style: $button.style /}
						{param type: $button.type ?: 'button' /}
					{/call}
				</div>
			{/if}
		</div>
	{/let}

	{if $type == 'form'}
		<form>
			{$dropdownMenu}
		</form>
	{else}
		{$dropdownMenu}
	{/if}
{/template}

/**
 * Renders the trigger button
 */
{template .trigger}
	{@param label: html|string}
	{@param? classes: string}
	{@param? expanded: bool}
	{@param? style: string}

	{let $buttonAttributes kind="attributes"}
		{if $expanded}
			aria-expanded="true"
		{else}
			aria-expanded="false"
		{/if}

		aria-haspopup="true"
		aria-label="toggle"
		class="dropdown-toggle btn
			{if $classes}
				{sp}{$classes}
			{/if}

			{if $style}
				{sp}btn-{$style}
			{else}
				{sp}btn-unstyled
			{/if}
		"

		data-onclick="toggle"
	{/let}

	<button {$buttonAttributes}>
		{$label}
	</button>
{/template}